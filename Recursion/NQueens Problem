import java.util.*;

public class NQueens {

    String answer="";
    boolean isPossible=false;

    boolean isValidPosition (int currCol, int currRow, int queens[], int n){
        boolean isValid=true;
        for(int j=0; j<currRow; j++){
            if(queens[j]==currCol){
                isValid=false;
                break;
            }
            if(Math.abs(queens[j]- currCol)==Math.abs(currRow-j)){
                isValid=false;
                break;
            }
        }
        return isValid;
    }

    void getQueenPositions(int currRow, int queens[],int n){
        if(currRow >= n){
            isPossible=true;
            appendToAnswerString(queens,n);
            return;
        }

        for(int col=0;col<n;col++){
            if(isValidPosition(col,currRow,queens,n)==true){
                queens[currRow]=col;
                getQueenPositions(currRow+1,queens,n);
            }
        }
    }
    
    void appendToAnswerString(int queens[],int n){
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(queens[j]==i){
                    answer +='1';
                }else{
                    answer +='0';
                }
            }

            answer +='\n';
        }
        answer +='\n';
    }



    String nQueens(int n) {
        answer="";
        isPossible=false;
        int queens[]=new int[n];
        getQueenPositions(0, queens,n);

        if(isPossible==true){
            return answer;
        }else{
            return "No Solution Exists";
        }
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n =  scanner.nextInt();
        scanner.close();
        NQueens result = new NQueens();
        String board = result.nQueens(n);
        System.out.println(board);
    }
}
