import java.util.*;

public class RobotInAGrid {


    public Vector<String> possiblePath(int grid[][], int row, int col,int n, int m){

        if (row == grid.length-1 && col == grid[0].length-1) {
            Vector<String> path = new Vector<String>();
            path.add((row+1) + " " + (col+1));
            return path;
        }

        if (grid[0][0] == 1 || grid[n-1][m-1] == 1) {
            return null;
        }

        // Check if the current cell is blocked or outside the grid boundaries

        if (row >= grid.length || col >= grid[0].length || grid[row][col] == 1) {
            return null;
        }

        Vector<String> rightPath = possiblePath(grid, row, col+1,n,m);
        Vector<String> downPath = possiblePath(grid, row+1, col,n,m);
         // If  right-word is present add the current cell to the path and return

        if (rightPath != null) {
            rightPath.add(0, (row+1) + " " + (col+1));
            return rightPath;
        }
        // If  down-word is present add the current cell to the path and return

        if (downPath != null) {
            downPath.add(0, (row+1) + " " + (col+1));
            return downPath;
        }


        return null;


    }

    // Implement your Solution Here
    Vector<String> robotInAGrid(int grid[][] , int n , int m) {
          Vector<String> ansList=possiblePath(grid,0,0,n,m);
          if(ansList==null){
              ansList.add("Not Possible");
          }
          return ansList;


    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int grid[][] = new int[n][m];
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                grid[i][j] = scanner.nextInt();
            }
        }
        scanner.close();
        RobotInAGrid answer = new RobotInAGrid();
        Vector<String> result = answer.robotInAGrid(grid , n , m);
        for(String elem : result)
        {
            System.out.println(elem);
        }
    }
}
